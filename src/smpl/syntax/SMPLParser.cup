package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxFnPlotException;
import smpl.values.SMPLValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal SEMI, COLON, COMMA;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW;

//bitwise operators
terminal BITAND, BITOR, COMP;

//Relational Operators
terminal EQ, GT, LT, GE, LE, NEQ;

//Logical operators
terminal AND, OR, NOT;

terminal CONCAT;

//keywords
terminal PROC, CALL, LAZY;
terminal DEF, ASSIGN;
terminal LET;
terminal IF, THEN, ELSE, CASE;
terminal QUERY;
terminal PAIR, CAR, CDR, LIST, SIZE;
terminal EQV, EQL;
terminal SUBSTRING;
terminal PRINT, PRINTLN, READ, READINT;

terminal NIL;

// terminals with values
terminal Integer INTEGER;
terminal Double REAL;
terminal String VARIABLE;
terminal Character CHAR;
terminal String STRING;
terminal Boolean BOOLEAN;