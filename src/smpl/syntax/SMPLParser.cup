package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSMPLException;
import smpl.values.SMPLValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxSMPLException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal SEMI, COLON, COMMA, DOT;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW;

//bitwise operators
terminal BITAND, BITOR, COMP;

//Relational Operators
terminal EQ, GT, LT, GE, LE, NEQ;

//Logical operators
terminal AND, OR, NOT;

terminal CONCAT;

//keywords
terminal PROC, CALL, LAZY;
terminal DEF, ASSIGN;
terminal LET;
terminal IF, THEN, ELSE, CASE;
terminal QUERY;
terminal PAIR, CAR, CDR, LIST, SIZE;
terminal EQV, EQL;
terminal SUBSTRING;
terminal PRINT, PRINTLN, READ, READINT;

terminal NIL;

// terminals with values
terminal Integer INTEGER;
terminal Double REAL;
terminal String VARIABLE;
terminal Character CHAR;
terminal String STRING;
terminal Boolean BOOLEAN;

/* Non terminals */
non terminal SMPLProgram program;
non terminal StmtSequence stmtList;

non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtLet letExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp expression;    

non terminal Exp comparison;

non terminal Exp procedureDef;
non terminsl ArrayList<String> params;
non terminal ArrayList<String> paramsAux;

non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp factor;
non terminal SMPLValue<?> number;

non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::=  stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
         expression:e SEMI {: RESULT = e; :};

definition ::= VARIABLE:v ASSIGN expression:e {:
                RESULT = new StmtDefinition(v,e);
            :} |
            DEF VARIABLE:v expression:e{:
                RESULT = new StmtDefinition(v,e);
            :};

expression ::=  letExp:l {: RESULT = l; :} |
                LBRACE expression:e RBRACE {: RESULT = e; :};
                arithExp:a {: RESULT = a; :} |
                comparison:c {: RESULT = c; :};

letExp ::= LET LPAREN bindings:bs RPAREN expression:body {:
			RESULT = new StmtLet(bs, body);
           :};

binding ::= VARIABLE:v EQ expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

comparison ::= expression:a EQ expression:b {: new ExpEQ(a,b); :} |
               expression:a LT expression:b {: new ExpLT(a,b); :} |
               expression:a GT expression:b {: new ExpGT(a,b); :} |
               expression:a LE expression:b {: new ExpLE(a,b); :} |
               expression:a GE expression:b {: new ExpGE(a,b); :} |
               expression:a NEQ expression:b {: new ExpNEQ(a,b); :};
               
procedureDef ::= PROC LPAREN params:p RPAREN expression:e{:
                    RESULT = new ExpProcedure(p,e);
                :} |
                PROC VARIABLE:v expression:e {: :} |
                PROC LPAREN params:p DOT params:p RPAREN expression:e {: :};

params ::= VARIABLE:v paramAux:pl {:
                    pl.add(v);
                    RESULT = pl;
                :} |
                empty {: RESULT = new ArrayList(); :};

paramsAux ::= COMMA VARIABLE:v paramAux:pl {:
                    pl.add(v);
                    RESULT = pl;
                :} |
                empty {: RESULT = new ArrayList(); :};

arithExp ::= 	arithExp:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
         term:t POW factor:f {: 
                RESULT = new ExpPow(t, f); :} |
	 factor:f {: RESULT = f; :};

number ::= INTEGER:ilit {: RESULT = SMPLValue.make(ilit); :}|
           REAL:ilit {: RESULT =  SMPLValue.make(ilit); :};

factor ::= number:n {: RESULT = new ExpLit(n); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	;



empty ::= ;